{"version":3,"sources":["components/Navbar.js","actions/itemActions.js","actions/types.js","components/ShoppingList.js","components/ItemModal.js","reducers/itemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Navbars","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","isOpen","toggle","setState","inherits","createClass","key","value","react_default","a","createElement","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","Component","setItemsLoading","type","ShoppingList","deleteClick","id","props","deleteItem","getItems","_this2","items","item","ListGroup","react_transition_group","map","_ref","_id","name","timeout","classNames","ListGroupItem","Button","size","bind","connect","dispatch","axios","get","then","res","payload","data","delete","ItemModal","modal","onChange","e","defineProperty","target","onSubmit","preventDefault","newItem","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","post","initialState","loading","combineReducers","undefined","action","objectSpread","filter","toConsumableArray","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","es","Navbar_Navbars","components_ItemModal","components_ShoppingList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b86c9c6.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, Container } from 'reactstrap';\r\n\r\n\r\nexport class Navbars extends Component {\r\n    state = {\r\n        isOpen: false\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n  \r\n    render() {\r\n    return (\r\n      <div>\r\n        <Navbar color='dark' dark expand='sm' className='mb-5'>\r\n            <Container>\r\n                <NavbarBrand href='/'>Shopping</NavbarBrand>\r\n                <NavbarToggler onClick={this.toggle}/>\r\n                <Collapse isOpen={this.state.isOpen} navbar>\r\n                    <Nav className='ml-auto' navbar>\r\n                        <NavItem>\r\n                            <NavLink href='https://github.com/mohamedsaad4'>Repo</NavLink>\r\n                        </NavItem>        \r\n                    </Nav>\r\n                </Collapse>\r\n            </Container>\r\n        </Navbar>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navbars;\r\n","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from \"./types\";\r\nimport axios from \"axios\";\r\n\r\nexport const getItems = () => dispatch => {\r\n  dispatch(setItemsLoading());\r\n\r\n  axios.get(\"/api/items\").then(res =>\r\n    dispatch({\r\n      type: GET_ITEMS,\r\n      payload: res.data\r\n    })\r\n  );\r\n};\r\n\r\nexport const deleteItem = id => dispatch => {\r\n  axios.delete(`api/items/${id}`).then(res =>\r\n    dispatch({\r\n      type: DELETE_ITEM,\r\n      payload: id\r\n    })\r\n  );\r\n};\r\n\r\nexport const addItem = item => dispatch => {\r\n  axios.post(\"/api/items\", item).then(res =>\r\n    dispatch({\r\n      type: ADD_ITEM,\r\n      payload: res.data\r\n    })\r\n  );\r\n};\r\n\r\nexport const setItemsLoading = () => {\r\n  return {\r\n    type: ITEMS_LOADING\r\n  };\r\n};\r\n","export const GET_ITEMS = 'GET_ITEMS';\r\nexport const ADD_ITEM = 'ADD_ITEM';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const ITEMS_LOADING = 'ITEMS_LOADING';","import React, { Component } from 'react';\r\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\r\nimport {  CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport { getItems, deleteItem } from '../actions/itemActions';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass ShoppingList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getItems();\r\n    }\r\n\r\n    deleteClick = (id) => {\r\n        this.props.deleteItem(id);\r\n    }\r\n\r\n    render() {\r\n        const { items } = this.props.item;\r\n    return (\r\n      <div>\r\n          <Container>\r\n              <ListGroup>\r\n                  <TransitionGroup className=\"shopping-list\">\r\n                    {\r\n                        items.map(({_id, name}) => (\r\n                            <CSSTransition key={_id} timeout={500} classNames='fade'>\r\n                                <ListGroupItem>\r\n                                    <Button\r\n                                        className='remove-btn'\r\n                                        color='danger'\r\n                                        size='sm'\r\n                                        onClick={this.deleteClick.bind(this, _id)}\r\n                                    >&times;</Button>\r\n                                     {name}\r\n                                </ListGroupItem>\r\n                            </CSSTransition>\r\n                        ))\r\n                    }\r\n                  </TransitionGroup>\r\n              </ListGroup>\r\n          </Container>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nShoppingList.propTypes = {\r\n    getItems: PropTypes.func.isRequired,\r\n    item: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item\r\n})\r\n\r\nexport default connect(mapStateToProps, { getItems, deleteItem })(ShoppingList);\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input\r\n} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { addItem } from \"../actions/itemActions\";\r\n\r\nclass ItemModal extends Component {\r\n  state = {\r\n    modal: false,\r\n    name: \"\"\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      modal: !this.state.modal\r\n    });\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  onSubmit = e => {\r\n      e.preventDefault();\r\n\r\n      const newItem = {\r\n          name: this.state.name\r\n      };\r\n\r\n      // add Item\r\n      this.props.addItem(newItem);\r\n\r\n      // close the modal after submit\r\n      this.toggle();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button\r\n          color=\"dark\"\r\n          style={{ marginBottom: \"2rem\" }}\r\n          onClick={this.toggle}\r\n        >\r\n          Add Item\r\n        </Button>\r\n\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>Add to shopping list</ModalHeader>\r\n          <ModalBody>\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                <Label for=\"item\">Item</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  id=\"item\"\r\n                  name=\"name\"\r\n                  placeholder=\"add shopping item\"\r\n                  onChange={this.onChange}\r\n                />\r\n\r\n                <Button\r\n                    color='dark'\r\n                    style={{marginTop: '2rem'}}\r\n                    block\r\n                >Add Item</Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { addItem })(ItemModal);\r\n","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false\r\n            }\r\n        case DELETE_ITEM:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.payload)\r\n            }\r\n        case ADD_ITEM:\r\n            return{\r\n                ...state,\r\n                items: [action.payload, ...state.items]\r\n            }\r\n        case ITEMS_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport itemReducer from './itemReducer';\r\n\r\nexport default combineReducers({\r\n    item: itemReducer\r\n});","import { compose, applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer, initialState, compose(\r\n    applyMiddleware(...middleware)\r\n));\r\n\r\nexport default store;","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Navbars } from \"./components/Navbar\";\nimport ShoppingList from \"./components/ShoppingList\";\nimport ItemModal from \"./components/ItemModal\";\n\nimport { Container } from \"reactstrap\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Navbars />\n          <Container>\n            <ItemModal />\n            <ShoppingList />\n          </Container>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}